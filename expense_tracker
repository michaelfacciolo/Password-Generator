import json
import os
import sys
import logging
from typing import List, Dict, Optional
from datetime import datetime

EXPENSES_FILE = "expenses.json"

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def load_expenses() -> List[Dict[str, float]]:
    """Load expenses from a JSON file with robust error handling."""
    if not os.path.exists(EXPENSES_FILE):
        logging.info("No expenses file found. Starting fresh.")
        return []
    
    try:
        with open(EXPENSES_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            if isinstance(data, list) and all(isinstance(i, dict) and 'description' in i and 'amount' in i for i in data):
                return data
            logging.warning("Corrupt data detected. Resetting file.")
    except (json.JSONDecodeError, IOError) as e:
        logging.error(f"Error reading expenses file: {e}")
    return []

def save_expenses(expenses: List[Dict[str, float]]) -> None:
    """Save expenses to a JSON file with error handling."""
    try:
        with open(EXPENSES_FILE, "w", encoding="utf-8") as file:
            json.dump(expenses, file, indent=4)
        logging.info("Expenses saved successfully.")
    except IOError as e:
        logging.error(f"Error saving expenses: {e}")

def get_valid_float(prompt: str) -> float:
    """Prompt the user for a valid float input with error handling."""
    while True:
        try:
            value = float(input(prompt).strip())
            if value < 0:
                raise ValueError("Amount cannot be negative.")
            return round(value, 2)
        except ValueError as e:
            logging.warning(f"Invalid input: {e}. Please enter a valid number.")

def add_expense(expenses: List[Dict[str, float]]) -> None:
    """Add a new expense."""
    description = input("Enter the expense description: ").strip()
    while not description:
        logging.warning("Description cannot be empty.")
        description = input("Enter the expense description: ").strip()
    
    amount = get_valid_float("Enter the expense amount: ")
    date = datetime.now().strftime("%d, %B %Y")
    
    expenses.append({"description": description, "amount": amount, "date": date})
    save_expenses(expenses)
    print("Expense added successfully!")

def view_expenses(expenses: List[Dict[str, float]], tail: Optional[int] = None) -> None:
    """View all expenses or only the last few expenses."""
    if not expenses:
        print("No expenses found.")
        return
    
    print("\nExpenses:")
    expenses_to_show = expenses[-tail:] if tail else expenses
    for i, expense in enumerate(expenses_to_show, 1):
        print(f"{i}. {expense['description']} - ${expense['amount']:.2f} (Date: {expense['date']})")
    total = sum(expense['amount'] for expense in expenses)
    print(f"\nTotal expenses: ${total:.2f}")

def get_valid_index(prompt: str, max_index: int) -> int:
    """Prompt the user for a valid index within the given range."""
    while True:
        try:
            index = int(input(prompt).strip()) - 1
            if 0 <= index < max_index:
                return index
            logging.warning("Invalid choice. Out of range.")
        except ValueError:
            logging.warning("Invalid input. Please enter a number.")

def delete_expense(expenses: List[Dict[str, float]]) -> None:
    """Delete an expense."""
    if not expenses:
        print("No expenses to delete.")
        return
    
    view_expenses(expenses)
    index = get_valid_index("Enter the expense number to delete: ", len(expenses))
    removed_expense = expenses.pop(index)
    save_expenses(expenses)
    print(f"Deleted expense: {removed_expense['description']} - ${removed_expense['amount']:.2f}")

def exit_program():
    """Exit the program gracefully."""
    print("Goodbye!")
    sys.exit(0)

def main() -> None:
    """Main function to run the expense tracker."""
    print("Welcome to the Expense Tracker!")
    expenses = load_expenses()
    
    menu_options = {
        "1": ("Add Expense", lambda: add_expense(expenses)),
        "2": ("View All Expenses", lambda: view_expenses(expenses)),
        "3": ("View Last 5 Expenses", lambda: view_expenses(expenses, tail=5)),
        "4": ("Delete Expense", lambda: delete_expense(expenses)),
        "5": ("Exit", exit_program)
    }
    
    while True:
        print("\nMenu:")
        for key, (desc, _) in menu_options.items():
            print(f"{key}. {desc}")
        
        choice = input("Enter your choice: ").strip()
        action = menu_options.get(choice, (None, lambda: logging.warning("Invalid choice. Please enter a valid option.")))[1]
        action()

if __name__ == "__main__":
    main()
